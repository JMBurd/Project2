import tkinter as tk
import sys
import subprocess
import threading
from Bio import SeqIO
from Bio import Entrez
from Bio.Sequencing.Applications import BwaIndexCommandline
import os
import time

# --- classes ---

class Redirect():

    def __init__(self, widget, autoscroll=True):
        self.widget = widget
        self.autoscroll = autoscroll

    def write(self, text):
        self.widget.insert('end', text)
        if self.autoscroll:
            self.widget.see("end")  # autoscroll
        

# --- functions ---

def run():
    threading.Thread(target=test).start()

def test():
    print("Thread: start")
    p = subprocess.Popen('ls', stdout = subprocess.PIPE, bufsize=1, text=True, shell=True)
    msg = p.stdout.readline().strip() # read a line from the process output
    l_Input = 'bwa index reference.fasta'
    #print(msg)
    p = subprocess.Popen(l_Input, stdout = subprocess.PIPE,stderr=subprocess.PIPE, bufsize=1, text=True, shell=True)
    msg = p.stderr.readline().strip() # read a line from the process output
    print(msg)
       
    
    p = subprocess.Popen('bwa mem -t 8 reference.fasta SRR2093871_1.fastq.gz |samtools sort -o sorted.bam', stderr = subprocess.PIPE, bufsize=1, text=True, shell=True)
    msg = p.stderr.readline().strip() # read a line from the process output
    print(msg)
    while p.poll() is None:
        time.sleep(10)
        msg = p.stderr.readline().strip() # read a line from the process output
        if msg:
            print(msg)
        else:
            print("nope") 
 

    #p = subprocess.Popen('bwa mem -t 8 reference.fasta SRR2093871_1.fastq.gz |samtools sort -o output.bam', stdout=subprocess.PIPE, bufsize=1, text=True, shell=True)
    print("Thread: end")

# --- main ---    

root2 = tk.Tk()

# - Frame with Text and Scrollbar -

frame = tk.Frame(root2)
frame.pack(expand=True, fill='both')

text = tk.Text(frame)
text.pack(side='left', fill='both', expand=True)

scrollbar = tk.Scrollbar(frame)
scrollbar.pack(side='right', fill='y')

text['yscrollcommand'] = scrollbar.set
scrollbar['command'] = text.yview

old_stdout = sys.stdout    
sys.stdout = Redirect(text)

# - rest -

button = tk.Button(root2, text='TEST', command=run)
button.pack()

root2.mainloop()

# - after close window -

sys.stdout = old_stdout
