#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 20 19:12:00 2022

@author: jburd
"""

import tkinter as tk
import sys
import subprocess
import threading

from Bio import SeqIO
from Bio import Entrez
from Bio.Sequencing.Applications import BwaIndexCommandline
import os
import time
from tkinter import *

from tkinter import filedialog as fd
from PIL import ImageTk, Image
from tkinter import messagebox as mb

#-----------------------------------------------------------------------------
# --- Global Varables for buttons ---
#-----------------------------------------------------------------------------

global g_FASTA
global g_SAM
global g_BAM
global g_url
global g_accession
global filename
#set intial values to the global variables
g_url = "null"
g_accession = "null"
g_FASTA = 'reference.fasta'
g_SAM = 'output.sam'
g_BAM = 'output.bam'
filename="reference gene ID"



#-----------------------------------------------------------------------------
# --- classes ---
#-----------------------------------------------------------------------------

class Redirect():
    def __init__(self, widget, autoscroll=True):
        self.widget = widget
        self.autoscroll = autoscroll
    def write(self, text):
        self.widget.insert('end', text)
        if self.autoscroll:
            self.widget.see("end")  # autoscroll


    #def flush(self):
    #    pass
#-----------------------------------------------------------------------------
# --- functions ---
#-----------------------------------------------------------------------------



def run_Main():
    t_Main = ""
    t_Main = threading.Thread(target=BWA_GUI, daemon=False, name=t_Main).start()

def bwa_thread():
    t_bwa1 = ""

    t_bwa1 = threading.Thread(target=BWA_run, daemon=True, name=t_bwa1).start()
    t_bwa1.join()
def out_pnt(X):
    while True:
        out_txt = X.stdout.readline()
        if out_txt == '':
            print("Command Complete")
            break
        if out_txt:
            print(out_txt.strip())

def out_Capture(inp_String, t_Delay):
    X = subprocess.Popen(inp_String, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, bufsize=1, text=True, shell=True)  

    while X.poll():
        out_pnt(X)
        time.sleep(t_Delay)
    else:
        out_pnt(X)
        
#-----------------------------------------------------------------------------
# ------- example function ------
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# --- Example UI ---
#-----------------------------------------------------------------------------

def BWA_GUI():
    root = tk.Tk()
    root.title("BWA")
    #root.iconbitmap('/home/jburd/anaconda3/test_programs/unnamed.png') 
    #my_img=ImageTk.PhotoImage(Image.open("unnamed.png").resize((600,200))) #image was to big have to resize to fit
    #my_label=Label(image=my_img)
    #my_label.grid(row=0,column=0, ipady=0.5, columnspan=5)
    #my_label2=Label(text=" ")
    #my_label2.grid(row=0,column=0)
# - Frame with Text and Scrollbar -

    frame = tk.Frame(root)
    frame.grid()

    text = tk.Text(frame)
    text.grid()
    
    scrollbar = tk.Scrollbar(frame)
    scrollbar.grid()
    
    text['yscrollcommand'] = scrollbar.set
    scrollbar['command'] = text.yview

    
    #-----------------------------------------------------------------------------
    
    #creating menu items
    my_menu=Menu(root)
    
    root.config(menu=my_menu) #configuring the menu
    
    file_menu=Menu(my_menu)
    my_menu.add_cascade(label = "File", menu=file_menu)
    file_menu.add_command(label = "Exit", command=root.destroy)
    
    my_text = Text(root, width=60, height=20)
    my_text.grid(row=6, column=0)
    
    
    #-----------------------------------------------------------------------------
    
    #start of defineing the different functions
    def search():
        
        global BFileName
        
        filetype = (
        ('grep files', '*.gz'),
        ('fasta files', '*.fasta'),
        ('All files', '*.*'))
    
        root.filename = fd.askopenfilename(
            title="select a file",
            filetypes = filetype)
        BFileName = os.path.basename(root.filename)
        #this is a test print out and not needed
        alabel=Label(root, text=BFileName).grid()
        
    def ref_search():
        
        global BRefFileName
    
        filetype = (
        ('fasta files', '*.fasta'),
        ('All files', '*.*'))
        root.filename = fd.askopenfilename(
            title="select a file",
            filetypes = filetype)
        BRefFileName = os.path.basename(root.filename)
        #this is a test print out and not needed
        alabel=Label(root, text=BRefFileName).grid()
    
    def E_search():
        Entrez.email="jmburd287@gmail.com"
        db_id=val.get()
        seq_id=e1.get()
        
        handle=Entrez.efetch(db=db_id, 
                             id=seq_id,
                             rettype='fasta', 
                             retmode='text')
        #record=SeqIO.parse(handle,'fasta') to do multiple files then read off in a array
        record=SeqIO.read(handle,'fasta')
        outputname=record.id+'.fasta' #record.id gives accession number
        SeqIO.write(record,outputname,'fasta')
    
    def wget_run():
        if g_url=="null":
            react=mb.askokcancel("no URL added", "Enter a URL")
            #Label(root,text=react).grid()
        else:
            os.system("wget "+g_url)
        return
    
    def sra_run():
        if g_accession=="null":
            react=mb.askokcancel("no accession number added", "Enter a accession number")
            #Label(root,text=react).grid()
        else:
            os.system("prefetch "+g_accession)     
            os.system("fasterq-dump "+g_accession)
        return
        
    def BWA_run():
    
            try:
                os.system('mkdir mapping')#create directory
            except:
                print()
            os.system('cd mapping/')#go into directory
    
            try:
                os.system('mkdir index')#make index directory
            except:
                print()
            
            print("Thread: start")
            out_Capture('ls', 0.00)
            l_Input = 'bwa index reference.fasta'
            out_Capture(l_Input, 0.00)

            l_Input = 'bwa mem -t 1 reference.fasta SRR2093871_1.fastq.gz |samtools sort -o sorted.bam'
            out_Capture(l_Input, 10)
            print("Thread: end")

            
            #os.system('mv '+ BRefFileName +' index/')#move fasta file to index
            #os.system('bwa index index/'+BRefFileName)
            #g_BAM = fd.askdirectory(title="Please select output pathway")
            #os.system('bwa mem -t 8 index/'+ BRefFileName+' '+BFileName+' |samtools sort -o '+g_BAM+'.bam')

    #-----------------------------------------------------------------------------
    
    #this is defineing all the parts that are in the root/main part of the gui
    wget_frame=LabelFrame(root, text="wget file download", padx=20, pady=20)
    sra_frame=LabelFrame(root, text="SRA file download",padx=20, pady=20)
    E_frame=LabelFrame(root, text="Etrenz download",padx=20, pady=20)
    ref_frame=LabelFrame(root, text="set reference sequence", padx=20, pady=20)
    seq_frame=LabelFrame(root, text="set mapping sequence",padx=20, pady=20)
    seq_frame2=LabelFrame(root, text="set 2nd mapping sequence",padx=20, pady=20)
    parm_frame=LabelFrame(root, text="check if you want to change parameters",padx=20, pady=20)
    
    #-----------------------------------------------------------------------------
    
    #griding the frames
    wget_frame.grid(row=1,column=1)
    sra_frame.grid(row=2,column=1)
    E_frame.grid(row=3,column=1)
    ref_frame.grid(row=4,column=1)
    seq_frame.grid(row=5,column=1)
    seq_frame2.grid(row=6,column=1)
    parm_frame.grid(row=7,column=1)
    
    #-----------------------------------------------------------------------------
    
    #places a entry box on the screen
    refe = Entry(ref_frame, width=50, borderwidth="5")
    refe.grid(row=1,column=1)
    refe.insert(0,filename)
    refe.get()
    
    e = Entry(seq_frame, width=50, borderwidth="5")
    e.grid(row=2,column=1)
    e.insert(0,"gene ID ")
    e.get()
    
    
    e1 = Entry(E_frame, width=50, borderwidth="5")
    e1.grid(row=1,column=1)
    e1.insert(0,"gene ID ")
    e1.get()
    
    e2 = Entry(E_frame, width=50, borderwidth="5")
    e2.grid(row=2,column=1)
    e2.insert(0,"Accession ID")
    g_accession=e2.get()
    
    e3 = Entry(E_frame, width=50, borderwidth="5")
    e3.grid(row=3,column=1)
    e3.insert(0,"wget URL")
    g_url=e3.get()
    
    #-----------------------------------------------------------------------------
    '''
    #making drop down menu
    val=StringVar()
    val.set("nucleotide")
    drop = OptionMenu(E_frame,val, #this needs to in intalized with the type of the variable intvar() for interger
                      "nucleotide",
                      "protein")
    drop.grid(row=1,column=0)
    '''
    #-----------------------------------------------------------------------------
    
    #-----------------------------------------------------------------------------

    ref_search_button=Button(ref_frame, 
                         text="file search", 
                         command=ref_search)
    search_button=Button(seq_frame, 
                         text="file search", 
                         command=search)

    esearch_button=Button(E_frame, 
                          text="entrez search", 
                          command=E_search)
    sra_button=Button(E_frame, 
                         text="Download", 
                         command=sra_run)
    wget_button=Button(E_frame, 
                         text="Download", 
                         command=wget_run)
    BWA_button=Button(root, 
                         text="run", 
                         command=BWA_run)


    #-----------------------------------------------------------------------------

    #organizing the buttons on the grid on the window
    esearch_button.grid(row=1,
                        column=2)
    sra_button.grid(row=2, 
                    column=2)
    wget_button.grid(row=3, 
                     column=2)


    ref_search_button.grid(row=1,
                       column=2)
    search_button.grid(row=2,
                       column=2)
    BWA_button.grid(row=6,
                    column=2)

    old_stdout = sys.stdout    
    sys.stdout = Redirect(text)


    root.mainloop()
    sys.stdout = old_stdout


run_Main()
